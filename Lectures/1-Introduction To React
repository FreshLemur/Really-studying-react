https://www.youtube.com/watch?v=MHn66JJH5zs&list=PLSsAz5wf2lkK_ekd0J__44KG6QoXetZza&index=1

Вступ до React.
        Про старі сайти.
            Старі сайти були не гнучкими і дуже сталими, в яких нічого не змінювалося. Вони працювали так:
                В нас є клієнт (браузер) ми вводимо запит він надсилається на сервер. Сервер отримує цей запит і завдання сервера повернути нам всю веб-сторінку. Сервер відтворює веб-сторінку і повертає її нашобу браузеру.
                Отже, коли користувач натискав на якесь зображення чи посилання, то спочатку відправлявся запит на сервер, а потім при поверненні оновлювалася сторінка і користувач отримував зщапит.
                Це явище називається SEVER SIDE RENDERING (рендерингом веб-сайту на сервері), старі веб-сайти використовували це.
                Однак, коли ми рухалися у майбутньому, то це змінилося.
        
    Як вебсайти еволюціонували?
        Більше інтерактивності.
        Користувачів ставало все більше і вони вимагали інтерактивності. КОристувачі хочуть, щоб їхні веб-сторінки відображали набагато більше, ніж просто веб-сторінку.
        Веб-сайти стали повноцінними веб-додатками (апками).
        Вони мали функціональність, подібну до програм на настільних комп'ютерів. Тепер у користувачів були повноцінні веб-додатки.
        Сучасність.
            Тепер майже кожен сайт це веб-програма, якою ми можемо скористатися просто увійшовши у браузер. Це сталося, тому що браузер став більше інтерактивнимю
            Сучасні програми в браузері запускаються, як рідні програми.
                Тепер більшість сайтів функціонують так, ніби ми запускаємо їх локально, як програмне забезпечення для робочого столу.
        Більше інтерактивності - більше JavaScript.
            Щоб сайти були більш інтерактивними, розробники писали більше коду.
            Це збільшило складність веб-сайтів, які вони намагалися створити.
        Підвищена складність - більше помилок.
            З'являлася все більше і більша кількість помилок, було майже неможливо встигати. Усі помилки, а також код який писався не були такими придатними для обслуговування, як мали б бути.
        Багато маніпуляцій з DOM.
            Щоб створити сайт більш інтерактивним за допомогою JS потрібно було робити дуже багато маніпуляцій з DOM(Document object model (репрезантативна версія нашої веб сторінки)). Щоб зробити сайт більш інтерактивним потрібно було внести зміни в DOM, а оновлення DOM самотужки виснажливе завдання.
            Зрештою, сайт став більш інтерактивним, але це породило багато проблем у бек-енд для розробників, коли їм приходиться мати справу з великою кількість коду JS, з яким вони повинні виконувати маніпуляції DOM вручну.
        Щоб вирішити ці всі проблеми було введено React.

        Як працює React застосунок?
            React базується на концепції візуалізації на стороні клієнта, тому в попередньому "традиційному" веб-сайті сервер повинен був виконати всю візуалізацію, але в React клієнт насправді виконує всю візуалізацію за нас, а під клієнтом ми просто маємо на увазі веб-браузер.
            Тож те, що відбувається в апці полягає в тому, що замість рендерингу кількох сторінок на сервері, реакт застосунок має одну сторінку, яка завантажується лише один раз. Тому, програми створені за допомогою React називаються односторінковими. Тому що можна розмістити ціле повноцінне робоче програмне забезпечення, використовуючи лише одну сторінку.
            Коли користувач натискає на щось, то React створює запит даних до API, замість зв'язку із сервером і замість того, щоб отримувати всю сторінку, програма React просто запитує дані. Тепер API повертає нам дані. Тому замість відтворення всієї веб=сторінки цей API просто повертає нам дані, і коли наша програма отримує ці дані, то вона бере дані на завантажує ці дані на певну частину веб-сторінки без необхідності перезавантажувати всю сторінку для користувача. ВСЯ ЦЯ КОНЦЕПЦІЯ НАЗИВАЄТЬСЯ РЕНДЕРИНГОМ НА СТОРОНІ КЛІЄНТА.
            Це називаєтья рендеринг на стороні клієнта, оскільки сервер не відображає всю веб-сторінку для нас, ми просто підключаємось до сервера або API, щоб отримати дані та React бере ці дані та додає їх до розділу веб-сторінки. Замість оновлення всієї сторінки оновлюється лише розділ цієї сторінки. Це оновлення фактичто виконується завдяки React.
            Це призводить до кращої динаміки та досвіду користувача. Саме цим React застосунки відрізняють від традиційного веб-сайту.
        
        React це лише open-source JS library for creating UI.
            React практично доступний для загального користування, немає комерційної ліцензії. Можна вільно переглядати вихідний код.

        React бібліотека, а не фреймворк.
            Деякі люди кажуть, що Реакт - фреймворк, але це не фреймворк, а просто бібліотека. Причина, чому React не є фреймворком полягає в тому, що ми не можемо створювати додатки з повним стеком лише за допомогою React. 
            Так, ми можемо створити кілька зовнішніх додатків, але для того, щоб створити back-end насправді потрібен інший фреймворк.
        
        React використовується для обробки рівня перегляду нашої апки. 
            Тому тут слід зауважити, що React насправді має справу лише з Front-End, ми не можемо використовувати React для нашого серверу або як сервер виконує певні дії.
            Якщо ми хочемо виконати деякий різновид автентифікації у Back-end ми не можемо це зробити завдяки React і тому фактично сказано, що React використовується для обробки рівня перегляду нашої програми. Як правило, коли ми розробляємо програму, існують різні рівні таких додатків, як model, the view, the controller. З цих рівнів апки React працює лише з рівнем перегляду застосунку.
        
        React дозволяє нам створювати великомасштабні апки, які можуть змінювати дані без перезавантаження. 

    Навіщо нам використовувати React.
        React був розроблений FaceBook.
            Завдяки цьому він постійно підтримується, є популярним, тому дуже легко вивчається на існує дуже багато посібників по ньому.
        
        JSX.
        Що таке JSX?
        JSX це спеціальний синтаксис, який дозволяє змішувати JS із HTML. Використовуючи JSX ми можемо створювати компоненти React за допомогою HTML і JS. Не потрібно вивчати жодну нову мову програмування.

        Затребувана навичка.
            Якщо ми хочемо подати заявку на Front-End Developer, швидше за все очікуватимуть від нас, що ми знаємо React.

        React можна поєднувати в будь-якому наборі технологій (Tech stack). 
            Немає значення, яку тихнологію ми використовуємо в Back-End. Вона добре сумісна з будь яким Back-End.
            Також з Front-End. Не обов'язково створювати всю сторінку, використовуючи лише React, тому що можна розробляти тільки деякі частини веб-сторінки за допомогою React, також можна використовувати будь яку іншу бібліотеку чи фреймворк.
        
        Можна перестрибнути в розробку мобільних додатків з React Native.
            React дуже схожий на React Native, тому буде досить просто створювати кросплатформенні мобільні додатки.

    Компонентна природа React.
        Реакт базується на компонентах. Отже,  компонент не "як найменший будівельний блок", з якого дім, якщо правильно об'єднати всі ці блоки. Таким самим чином працює React, створюючи маленькі компоненти, котрі потім об'єднуються в додаток.
        Можна створити один компонент і використовувати його безліч разів.